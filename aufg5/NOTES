Build/Test commands
===================

make all
	Kompiliert alle Java-Klassen.

$(make test) <ClassName>
	Testklasse <ClassName> (ohne Dateierweiterung) ausführen.

make all && $(make test) <ClassName>
	Kompiliere und führe aus.


ToDo
====

Entwicklungsvorgehen
--------------------

1. Vertrautmachen mit WSDL
2. Wie wird Java zu WSDL? Wie funktioniert Bibliothek?
3. Java-Testklasse konzipieren
	3.1. Vorausgehende Nicht-XML-basierte Tests planen
	3.2. XML-basierte Tests planen
		3.2.1. Auswahl der zu konvertierenden Java-Interfaces
			* Welche Anforderungen erfüllt Java2WSDL?
			* Welche sinnvollen Möglichkeiten der Varianz von Java-Interfaces?
			* Welche XML-Knoten müssen berücksichtigt werden welche nicht?
4. Testklasse implementieren
	* unter Umständen schreiben von eigenen spezifischen XML-Komparatoren

Genereller Test-Ablauf
----------------------

1. Konversion zu WSDL mit alter Bibliothek
2. Konversion zu WSDL mit neuer Bibliothek
3. Vergleichen der beiden XML


Anmerkungen aus/zur Entwicklung
===============================

Testplanung
-----------

### Nicht im Regressionstest

Es wird nicht getestet, ob eine Datei generiert wird, denn das sollte im
Komponenten-Test der neuen Teile geschehen sein. Es ist somit kein Teil des
Regressionstest.


### XML-Knoten-Reihenfolge

Das Vergleichen von XML-Bäumen ist nicht einfach oder trivial, da z.B. die
Reihenfolge von Knoten von Knotentyp und Semantik der konkreten XML-Sprache
abhängig ist. Um die Tests einfach zu halten, sollen daher XML-Test das Testen
mit Berücksichtigung der Reihenfolge bevorzugen.


### XML-Kommentare

Da Kommentare nicht zum eigentlichen Datenbestand (Payload) eines XML-Baumes
gehören, sollen diese beim Vergleichen unberücksichtigt bleiben.


Vergleichen der XML
-------------------

Zum Vergleichen der XML-Bäume wird XMLUnit (NS org.custommonkey.xmlunit) genutzt.


Modifizierte Axis-Version
-------------------------

### Conversion in Dateien ohne Extension

Output-Dateien (Java2WSDL-"-o"-Option) die keinen Dateierweiterung (".wsdl")
beinhalten, führen zum Absturz der modifizierten Java2WSDL.


Treffen 2015-01-27
==================

1. Behandlung von Kommentarknoten
---------------------------------

Kommentarknoten sollen nicht beim Vergleich geprüft werden, da die beide
Bibliotheksversionen nur einen schreiben, der die Bibliotheksversion beinhaltet.
Die Bibliotheksversion muss bei unterschiedlichen Kompilaten unterschiedlich sein.

2. XML-Namespaces testen
------------------------

XML-Namespaces werden auf Gleichheit getestet.

3. Welche Interfaces testen?
----------------------------

### Testbare Aspekte von Interfaces

* Methodenanzahl: 0, viele
* Methodensignatur:
	* Returntypen
	* Parametertypen
	* Anzahl von Parametern
	* Methodensichtbarkeit (public, protected, private)
	* Methodengültigkeitsbereich (Instanz oder Klasse; static oder non-static)
	* Exceptions
	* Überschreibbarkeit (final)
	* Annotationen (@...)

* eigene Typen
	* als Param
	* als Return

* Methodenparameter
	* Bezeichner:
		* Möglichen Schriftzeichen: https://stackoverflow.com/questions/11774099
